// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                    String               @id @default(cuid())
    name                  String?
    email                 String?              @unique
    emailVerified         DateTime?
    isVerified            Boolean              @default(false)
    hasFailedVerification Boolean              @default(false)
    image                 String?
    isAdmin               Boolean              @default(false)
    accounts              Account[]
    sessions              Session[]
    userEntries           UserEntry[]
    verificationRequestId String?              @unique
    verificationRequest   VerificationRequest? @relation()
    edits                 EntryRevision[]
    reviews               EntryReview[]
}

model VerificationRequest {
    id        String   @id @default(cuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    details   String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Entry {
    id             String  @id @default(cuid())
    // Editable fields (directly)
    term           String  @unique
    definition     String
    links          Json?
    longDefinition String?
    acronym        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    userEntries      UserEntry[]
    edits            EntryRevision[] @relation("edits")
    currentVersion   EntryRevision?  @relation("currentVersion", fields: [currentVersionId], references: [id])
    currentVersionId String?         @unique
    reviews          EntryReview[]
    tags             EntryTag[]
    relatedTo        EntryRelation[] @relation("relatedTo")
    relatedFrom      EntryRelation[] @relation("relatedFrom")
}

model EntryRevision {
    id      String @id @default(cuid())
    entryId String
    userId  String

    term           String
    definition     String
    longDefinition String?
    links          Json?
    tags           String[]
    acronym        String?

    previousTerm           String
    previousDefinition     String
    previousLongDefinition String?
    previousLinks          Json?
    previousTags           String[]
    previousAcronym        String?

    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    parentId       String?
    parent         EntryRevision?  @relation("parent", fields: [parentId], references: [id])
    children       EntryRevision[] @relation("parent")
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    entry          Entry           @relation("edits", fields: [entryId], references: [id], onDelete: Cascade)
    currentVersion Entry?          @relation("currentVersion")
    entryEditId    String?
    reviews        EntryReview[]

    @@map("EntryEdit")
}

model UserEntry {
    id          String   @id @default(cuid())
    userId      String
    entryId     String
    isCreator   Boolean  @default(false)
    canEdit     Boolean  @default(false)
    hasLiked    Boolean  @default(false)
    hasEdited   Boolean  @default(false)
    hasReviewed Boolean  @default(false)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    entry       Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([userId, entryId])
}

model EntryReview {
    id                String         @id @default(cuid())
    userId            String
    entryId           String
    user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    entry             Entry          @relation(fields: [entryId], references: [id], onDelete: Cascade)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    reviewedVersionId String?
    reviewedVersion   EntryRevision? @relation(fields: [reviewedVersionId], references: [id], onDelete: Cascade)

    @@unique([userId, entryId])
}

model EntryRelation {
    entryAId String
    entryA   Entry  @relation("relatedTo", fields: [entryAId], references: [id])
    entryBId String
    entryB   Entry  @relation("relatedFrom", fields: [entryBId], references: [id])

    @@id([entryAId, entryBId])
    @@map("entry_relations")
}

model Tag {
    id        String     @id @default(cuid())
    name      String     @unique
    color     String
    entries   EntryTag[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model EntryTag {
    entryId   String
    tagId     String
    entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([entryId, tagId])
}
